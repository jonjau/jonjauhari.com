{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/the-visitor-pattern-for-simple-collision-handling/","result":{"data":{"site":{"siteMetadata":{"title":"Jonathan Jauhari"}},"markdownRemark":{"id":"044934c0-9139-587c-a873-13942feeb8a7","excerpt":"Let’s say we were building a system where components can interact with other\ncomponents, and based on the combination of components, some behaviour is to\nbe…","html":"<p>Let’s say we were building a system where components can interact with other\ncomponents, and based on the combination of components, some behaviour is to\nbe expected. We must also assume the handled interactions are only between\npairs.</p>\n<p>A classic example is a pairwise collision system:</p>\n<ul>\n<li>Adventurers and beasts are creatures.</li>\n<li>Adventurers are either knights or archers.</li>\n<li>Beasts are either werewolves or (flying) dragons.</li>\n<li>When adventurers and beasts collide, they fight.</li>\n<li>The way a fight goes is decided by the kind of the adventurer, as well as the\nkind of the beast, e.g. archers shoot dragons, punch werewolves, and\nwerewolves disarm knights.</li>\n<li>Knights are particularly polite — when a pair of knights meet, they loudly\ngreet each other.</li>\n</ul>\n<p>We see that we can have well-defined adventurer-beast collisions and\npossibly a knight-knight collision too. To start off, the collision handling\nsystem shouldn’t need to know the class hierarchy and how each\ncreature behaves when it hits another, it just needs them to <em>do what they do</em>.\nA simple system might look like this, free of <code>instanceof</code> checks:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Creature</span><span class=\"token punctuation\">></span></span> cs<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// called every turn / game tick</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">handleCollisions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c1 <span class=\"token operator\">:</span> cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Creature</span><span class=\"token punctuation\">></span></span> colliding <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getColliding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c2 <span class=\"token operator\">:</span> colliding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                c1<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>The alternative</h2>\n<p>In abbreviated Java, an initial design might be:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Creature</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Creature</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getColliding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adventurer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Creature</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Knight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adventurer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Knight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Werewolf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Werewolf</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Dragon</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">taunt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dragon</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Archer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adventurer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Werewolf</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">punch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Werewolf</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Dragon</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dragon</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Beast</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Creature</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dragon</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Knight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Archer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Archer</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Werewolf</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Knight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">disarm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Archer</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">charge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Archer</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All we’ve really done is push back the <code>instanceof</code> checks into each\nmethod’s implementation. This works.</p>\n<ul>\n<li>Adding new behaviour for existing classes means adding an extra\n<code>instanceof</code> check.</li>\n<li>Adding a new kind of <code>Creature</code> will not affect existing classes. If they\ndon’t interact with the new kind of <code>Creature</code>, they simply don’t have\nto handle it in the if-else chain.</li>\n</ul>\n<p>Note that we will have as many <code>instanceof</code> checks as the number of\nwell-defined interactions. Also note that what we’ve done here, is pretty\nmuch <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching\">pattern matching</a>,\njust a lot uglier. Apparently more recent Java versions have\n<a href=\"https://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html\">improved on that</a>.\nThat being said, this alternative <code>instanceof</code> approach doesn’t really have\na name, and I’m not sure if fits among the usual over-abstracted Java code.</p>\n<h2>Multiple dispatch</h2>\n<p>It does seem like we’re sidestepping the type system. In each <code>collide</code>\ndefinition, we’re lying about what we actually require. Knowing that we are\ncolliding with a <code>Creature</code> is not enough, we need more specific type\ninformation, and yet this isn’t reflected in the function signatures. Though\nit’s not clear how it would be!</p>\n<p>What we want is <a href=\"https://stackoverflow.com/questions/1749534/multiple-dispatch-in-c\">multiple dispatch</a>:</p>\n<blockquote>\n<p>The concrete function that is called from a function call can depend on the\ndynamic (runtime) type of more than one of its arguments.</p>\n</blockquote>\n<p>Note that the object-oriented <code>a.collide(b)</code> is really just <code>collide(a,b)</code>,\nwhere the objects <code>a</code>, <code>b</code> are arguments and <code>a</code> gets special treatment.</p>\n<p>The issue is, Java, like C++, Python, and many other languages, only supports\n<a href=\"https://en.wikipedia.org/wiki/Dynamic_dispatch#Single_and_multiple_dispatch\">single dispatch</a>:</p>\n<blockquote>\n<p>The concrete function that is called from a function call depends on the\ndynamic (meaning runtime) type of a single object, the <em>receiver</em>, which is\n<code>a</code> in <code>a.collide(b)</code>.</p>\n</blockquote>\n<p>To illustrate:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Creature</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Archer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Creature</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Werewolf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Archer.collide(Creature) is called</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Werewolf.collide(Creature) is called</span></code></pre></div>\n<h2>The visitor pattern</h2>\n<p>There is no way to achieve <code>Archer.collide(Werewolf)</code> or\n<code>Werewolf.collide(Archer)</code> when both <code>a</code> and <code>w</code> are <code>Creature</code> references,\nwithout an extra layer of indirection. It is not enough to know the\nconcrete type of the “collider” — the “thing being hit” should also tell its\nconcrete type to the “collider”. The latter should occur before the former:\nit doesn’t make sense to introduce yourself to someone after they’ve done\nsomething special for you — they need to know who you are to act accordingly.\nThis is exactly the <a href=\"https://www.tutorialspoint.com/design_pattern/visitor_pattern.htm\">visitor pattern</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// we know 'w' is a Werewolf, 'w' accepts 'a' by calling 'a.visit(this)'</span>\nw<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// now we also know 'a' is an Archer, so 'a' shoots 'w'.</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// similarly for werewolves colliding with archers.</span></code></pre></div>\n<p>In our case, <code>Creature</code>s are both visitors and things to be visited, where\n“visit” is understood as “collide”.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// things that can collide with creatures should implement (part of) this</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CreatureVisitor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Archer</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Werewolf</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dragon</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Creature</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CreatureVisitor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Creature</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getColliding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*...*/</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// all creatures must \"introduce themselves\" to things colliding into them</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreatureVisitor</span> visitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Adventurer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Creature</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Knight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adventurer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreatureVisitor</span> visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Werewolf</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dragon</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">taunt</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Archer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Adventurer</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreatureVisitor</span> visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Werewolf</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">punch</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dragon</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Beast</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Creature</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dragon</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreatureVisitor</span> visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Archer</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Werewolf</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreatureVisitor</span> visitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Knight</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">disarm</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Archer</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">charge</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It ends up being just as verbose, but indeed it leans upon Java’s (nominal)\ntype system a bit more. The calling code will also have to change slightly,\ninstead of calling <code>collide</code> directly, we instead “accept” collisions:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Creature</span><span class=\"token punctuation\">></span></span> cs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">handleCollisions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c1 <span class=\"token operator\">:</span> cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Creature</span><span class=\"token punctuation\">></span></span> colliding <span class=\"token operator\">=</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getColliding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Creature</span> c2 <span class=\"token operator\">:</span> colliding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                c2<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This also works.</p>\n<ul>\n<li>Adding new behaviour for existing classes means changing the implementation\nof a <code>collide</code> method.</li>\n<li>Adding a new kind of Creature will not affect existing classes. If they\naren’t concerned about the new kind of Creature, they simply don’t have to\nimplement a <code>collide(NewCreatureType x)</code>. Though that method will have to\nbe added to the <code>CreatureVisitor</code> interface as a default, empty method.</li>\n</ul>\n<p>The duplication of <code>collide</code> in <code>CreatureVisitor</code> might be something that can\nimproved on, but I’m not sure. The use of <code>default</code> might also be less than\nideal, for instance if each class in the hierarchy only implements 1 or 2 out\nof 10+ methods in the interface. But that would probably be an issue of the\ndesign of the hierarchy itself.</p>\n<p><a href=\"https://ericlippert.com/2015/04/27/wizards-and-warriors-part-one/\">Here</a>\nis a more in-depth exploration of alternatives to the visitor pattern. It’s\nparticularly interesting as C# does have language support for multiple\ndispatch, through the <code>dynamic</code> keyword.</p>\n<h2>Code dump</h2>\n<p>To save space, I wrote the testing code in Kotlin:</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> CreatureVisitor <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Knight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Archer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">:</span> Werewolf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Dragon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Creature <span class=\"token operator\">:</span> CreatureVisitor <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getColliding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Creature<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> CreatureVisitor<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Adventurer <span class=\"token operator\">:</span> <span class=\"token function\">Creature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> Knight <span class=\"token operator\">:</span> <span class=\"token function\">Adventurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> CreatureVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Knight<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Dragon<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">taunt</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">:</span> Werewolf<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Knight<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hail!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">taunt</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Dragon<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(knight hits dragon)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">slash</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">:</span> Werewolf<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(knight slashes werewolf)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> Archer <span class=\"token operator\">:</span> <span class=\"token function\">Adventurer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> CreatureVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">:</span> Werewolf<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">punch</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Dragon<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> Dragon<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(archer shoots dragon)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">punch</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">:</span> Werewolf<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(archer punches werewolf)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Beast <span class=\"token operator\">:</span> <span class=\"token function\">Creature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> Dragon <span class=\"token operator\">:</span> <span class=\"token function\">Beast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> CreatureVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Knight<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Archer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">immolate</span><span class=\"token punctuation\">(</span>adv<span class=\"token operator\">:</span> Adventurer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(dragon immolates adventurer)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> Werewolf <span class=\"token operator\">:</span> <span class=\"token function\">Beast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>visitor<span class=\"token operator\">:</span> CreatureVisitor<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> visitor<span class=\"token punctuation\">.</span><span class=\"token function\">collide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Knight<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">disarm</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">collide</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Archer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">charge</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">disarm</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> Knight<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(werewolf disarms knight)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">charge</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> Archer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(werewolf charges archer)\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> k1 <span class=\"token operator\">=</span> <span class=\"token function\">Knight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> k2 <span class=\"token operator\">=</span> <span class=\"token function\">Knight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> <span class=\"token function\">Archer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> d <span class=\"token operator\">=</span> <span class=\"token function\">Dragon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> w <span class=\"token operator\">=</span> <span class=\"token function\">Werewolf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> cs <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">,</span> k2<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c1 <span class=\"token keyword\">in</span> cs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// hardcoded: assume every creature is colliding with everything else</span>\n        <span class=\"token keyword\">val</span> colliding <span class=\"token operator\">=</span> cs<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">!=</span> c1 <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c2 <span class=\"token keyword\">in</span> colliding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            c2<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The output:</p>\n<div class=\"gatsby-highlight\" data-language=\"_\"><pre class=\"language-_\"><code class=\"language-_\">Hail!\n(knight hits dragon)\n(knight slashes werewolf)\nHail!\n(knight hits dragon)\n(knight slashes werewolf)\n(archer shoots dragon)\n(archer punches werewolf)\n(dragon immolates adventurer)\n(dragon immolates adventurer)\n(dragon immolates adventurer)\n(werewolf disarms knight)\n(werewolf disarms knight)\n(werewolf charges archer)</code></pre></div>","frontmatter":{"title":"The Visitor Pattern for Simple Collision Handling","date":"November 20, 2020","description":"A motivation for the visitor design pattern."}},"previous":{"fields":{"slug":"/a-sudoku-solver-in-15-lines-of-prolog/"},"frontmatter":{"title":"A Sudoku Solver in 15 Lines of Prolog"}},"next":{"fields":{"slug":"/making-english-more-regular-with-esperanto-grammar/"},"frontmatter":{"title":"Making English More Regular With Esperanto Grammar"}}},"pageContext":{"id":"044934c0-9139-587c-a873-13942feeb8a7","previousPostId":"c1755bc9-3c36-54c1-8753-d853166fc885","nextPostId":"9a90b155-c306-5783-8fd5-2b149a1b4511"}},"staticQueryHashes":["2841359383"]}