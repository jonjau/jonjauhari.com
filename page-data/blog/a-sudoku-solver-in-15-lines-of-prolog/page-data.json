{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/a-sudoku-solver-in-15-lines-of-prolog/","result":{"data":{"site":{"siteMetadata":{"title":"Jonathan Jauhari"}},"markdownRemark":{"id":"c1755bc9-3c36-54c1-8753-d853166fc885","excerpt":"The title says it all. I came across this Prolog code in a lecture recently,\nand it seems to come from here. If this\nisn’t peak abstraction, I don’t know what…","html":"<p>The title says it all. I came across this Prolog code in a lecture recently,\nand it seems to come from <a href=\"https://www.metalevel.at/sudoku/\">here</a>. If this\nisn’t peak abstraction, I don’t know what is.</p>\n<p>Honestly though, can anyone even claim this is computer code? Seems to me like\na line-by-line translation from the rules of Sudoku <em>that actually runs</em> (!!).</p>\n<p>I’ve added some annotations below — it really is just precise, plain, English.</p>\n<div class=\"gatsby-highlight\" data-language=\"prolog\"><pre class=\"language-prolog\"><code class=\"language-prolog\"><span class=\"token operator\">:-</span> <span class=\"token function\">use_module</span><span class=\"token punctuation\">(</span><span class=\"token function\">library</span><span class=\"token punctuation\">(</span>clpfd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>                          <span class=\"token comment\">%*</span>\n\n<span class=\"token function\">sudoku</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Rows</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>\n    <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Rows</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">maplist</span><span class=\"token punctuation\">(</span><span class=\"token function\">same_length</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Rows</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Rows</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">%1</span>\n    <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Rows</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Vs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Vs</span> ins <span class=\"token number\">1.</span><span class=\"token operator\">.</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">%2</span>\n    <span class=\"token function\">maplist</span><span class=\"token punctuation\">(</span>all_distinct<span class=\"token punctuation\">,</span> <span class=\"token variable\">Rows</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">%3</span>\n    <span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Rows</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Columns</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">%4</span>\n    <span class=\"token function\">maplist</span><span class=\"token punctuation\">(</span>all_distinct<span class=\"token punctuation\">,</span> <span class=\"token variable\">Columns</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">%5</span>\n    <span class=\"token variable\">Rows</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span><span class=\"token variable\">B</span><span class=\"token punctuation\">,</span><span class=\"token variable\">C</span><span class=\"token punctuation\">,</span><span class=\"token variable\">D</span><span class=\"token punctuation\">,</span><span class=\"token variable\">E</span><span class=\"token punctuation\">,</span><span class=\"token variable\">F</span><span class=\"token punctuation\">,</span><span class=\"token variable\">G</span><span class=\"token punctuation\">,</span><span class=\"token variable\">H</span><span class=\"token punctuation\">,</span><span class=\"token variable\">I</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">B</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token variable\">D</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">E</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token variable\">G</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">H</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">I</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>  <span class=\"token comment\">%6</span>\n\n<span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>\n<span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span><span class=\"token variable\">B</span><span class=\"token punctuation\">,</span><span class=\"token variable\">C</span><span class=\"token operator\">|</span><span class=\"token variable\">Bs1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">D</span><span class=\"token punctuation\">,</span><span class=\"token variable\">E</span><span class=\"token punctuation\">,</span><span class=\"token variable\">F</span><span class=\"token operator\">|</span><span class=\"token variable\">Bs2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">G</span><span class=\"token punctuation\">,</span><span class=\"token variable\">H</span><span class=\"token punctuation\">,</span><span class=\"token variable\">I</span><span class=\"token operator\">|</span><span class=\"token variable\">Bs3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:-</span>        <span class=\"token comment\">%7</span>\n    <span class=\"token function\">all_distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token variable\">A</span><span class=\"token punctuation\">,</span><span class=\"token variable\">B</span><span class=\"token punctuation\">,</span><span class=\"token variable\">C</span><span class=\"token punctuation\">,</span><span class=\"token variable\">D</span><span class=\"token punctuation\">,</span><span class=\"token variable\">E</span><span class=\"token punctuation\">,</span><span class=\"token variable\">F</span><span class=\"token punctuation\">,</span><span class=\"token variable\">G</span><span class=\"token punctuation\">,</span><span class=\"token variable\">H</span><span class=\"token punctuation\">,</span><span class=\"token variable\">I</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">blocks</span><span class=\"token punctuation\">(</span><span class=\"token variable\">Bs1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Bs2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">Bs3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span></code></pre></div>\n<p>* This is the secret sauce:\n<a href=\"http://pathwayslms.com/swipltuts/clpfd/clpfd.html\">Constraint Logic Programming over Finite Domains</a>,\nwhich is as far as I know, needed for the <code class=\"language-text\">Vs ins 1..9</code> bit.</p>\n<p>A list of lists <code class=\"language-text\">Rows</code> is a solved Sudoku puzzle when all of these statements\nhold:</p>\n<ol>\n<li>There are 9 rows, each row is 9 elements long, i.e. the board is square.</li>\n<li>The concatenation of the rows (that is, the entire board) only contains\nnumbers 1 to 9.</li>\n<li>In each row the values contained are distinct.</li>\n<li>Columns are the rows of the board transposed.</li>\n<li>In each column the values contained are distinct.</li>\n<li>Letting the rows from the first to the ninth be named A to I,\nRows A,B,C, and D,E,F, and G,H,I form “blocks”.</li>\n<li>Three rows form “blocks” if the first three values from each of the three\nrows (a 3x3 on the board) altogether contain only distinct values, and\nthat this is true for the following group of three values. Three empty rows\nare considered to form “blocks”.</li>\n</ol>\n<p>If only project specifications in the real world were as precise as\nlogic puzzles!</p>\n<p>Essentially, you define what makes a solution a solution, and Prolog\n(at least, in the interactive <code class=\"language-text\">swipl</code> prompt) will:</p>\n<ul>\n<li>If given a complete solution, verify that it truly is a solution\n(outputting true if so, false otherwise).</li>\n<li>If given a partial solution, try different\nvariable bindings to make it a correct solution (outputting each set of\nsuch bindings).\nIf it fails in doing so, it spits out false.</li>\n<li>If given nothing i.e. an unbound variable, binds that variable to all the\npossible completed Sudoku puzzles (maybe not in the way you expect,\n<code class=\"language-text\">swipl</code> showed them “bound” in terms of variables, not numbers).</li>\n</ul>\n<h2>Running the code</h2>\n<p>Sure enough it actually runs. In a vanilla\n<a href=\"https://www.swi-prolog.org/\">SWI-Prolog</a> session:</p>\n<div class=\"gatsby-highlight\" data-language=\"_\"><pre class=\"language-_\"><code class=\"language-_\">(manually formatted swipl output)\n\n?- Puzzle=[[5,3,_, _,7,_, _,_,_],\n|          [6,_,_, 1,9,5, _,_,_],\n|          [_,9,8, _,_,_, _,6,_],\n|\n|          [8,_,_, _,6,_, _,_,3],\n|          [4,_,_, 8,_,3, _,_,1],\n|          [7,_,_, _,2,_, _,_,6],\n|\n|          [_,6,_, _,_,_, 2,8,_],\n|          [_,_,_, 4,1,9, _,_,5],\n|          [_,_,_, _,8,_, _,7,9]],\n|    sudoku(Puzzle),\n|    write(Puzzle).\n[[5,3,4, 6,7,8, 9,1,2],\n [6,7,2, 1,9,5, 3,4,8],\n [1,9,8, 3,4,2, 5,6,7],\n\n [8,5,9, 7,6,1, 4,2,3],\n [4,2,6, 8,5,3, 7,9,1],\n [7,1,3, 9,2,4, 8,5,6],\n\n [9,6,1, 5,3,7, 2,8,4],\n [2,8,7, 4,1,9, 6,3,5],\n [3,4,5, 2,8,6, 1,7,9]]\nPuzzle=(omitted)</code></pre></div>","frontmatter":{"title":"A Sudoku Solver in 15 Lines of Prolog","date":"October 26, 2020","description":"Appreciating a sudoku solver in 15 lines of Prolog."}},"previous":{"fields":{"slug":"/monads-applicatives-and-functors-in-haskell/"},"frontmatter":{"title":"Monads, Applicatives, and Functors in Haskell"}},"next":{"fields":{"slug":"/the-visitor-pattern-for-simple-collision-handling/"},"frontmatter":{"title":"The Visitor Pattern for Simple Collision Handling"}}},"pageContext":{"id":"c1755bc9-3c36-54c1-8753-d853166fc885","previousPostId":"b92cb5e3-d5fd-532f-bb02-374ab3477e3f","nextPostId":"044934c0-9139-587c-a873-13942feeb8a7"}},"staticQueryHashes":["2841359383"]}